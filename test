using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq.Expressions;
using UnityEngine;
using UnityEngine.Timeline;


[RequireComponent(typeof(Rigidbody2D),typeof(Animator),typeof(physicscheck))]
public class Enemy : MonoBehaviour
{
    [HideInInspector] public Rigidbody2D rb;
    [HideInInspector] public Animator anim;
    private Collider2D coll;

    [HideInInspector] public physicscheck physicscheck;//隐藏

    [Header("基本参数")]

    public float normalSpeed;
    public float chaseSpeed;
    public float currentSpeed;
    public float hurtForce;
    public Vector3 faceDir;
    public Transform attacker;
    public Vector3 spwanPoint;

    [Header("检测")]
    public Vector2 centerOffest;//中心
    public Vector2 checkSize;//检测尺寸
    public float checkDistance;//检测距离
    public LayerMask attackLayer;


    [Header("计时器")]
    public float waitTime;
    public float waitTimeCounter;
    public bool wait;

    public float LostTime;
    public float LostTimeCounter;

    [Header("状态")]
    public bool isHurt;
    public bool isDead;

    protected BaseState patrolState;//巡逻状态
    protected BaseState currentState;//当前状态
    protected BaseState chassState;//追击状态
    protected BaseState skillState;//技能状态

    [Header("组件")]
    public ParticleSystem HitPs;
    private PickupSpawner pickupSpawner;//掉落道具脚本
    private HealthPickupSpawner healthPickupSpawner;


    protected virtual void Awake() {

        rb = GetComponent<Rigidbody2D>();
        anim = GetComponent<Animator>();
        physicscheck = GetComponent<physicscheck>();
        coll = GetComponent<Collider2D>();
        pickupSpawner = GetComponent<PickupSpawner>();
        healthPickupSpawner = GetComponent<HealthPickupSpawner>();


        currentSpeed = normalSpeed;
        // waitTimeCounter = waitTime;
        spwanPoint = transform.position;
    }

//物体激活
    private void OnEnable() 
    {
        currentState = patrolState;//当前状态的赋予
        currentState.OnEnter(this);//当前状态的进入
    }

    protected virtual void Update() 
    {
        faceDir = new Vector3(-transform.localScale.x,0,0);
        


        currentState.LogicUpdate();//当前状态的逻辑
        TimeCounter();
        // Debug.Log(faceDir);
        // Debug.Log(transform.localScale);
    // Debug.Log($"Update - anim.walk: {anim.GetBool("walk")}, anim.run: {anim.GetBool("run")}");

    }

    private void FixedUpdate() {

        if (!isHurt && !wait && !isDead)
        {
            Move();
        }
        currentState.PhysicsUpdate();//当前状态的物理
    }


    private void OnDisable() 
    {
        currentState.OnExit();//当前状态的提出
    }


    public virtual void Move()
    {
        if (!anim.GetCurrentAnimatorStateInfo(0).IsName("SnailPreMove") && !anim.GetCurrentAnimatorStateInfo(0).IsName("SnailRecover"))
        {
            rb.velocity = new Vector2(currentSpeed * faceDir.x * Time.deltaTime,rb.velocity.y);
            // if (!isDead)
            // {
            //     rb.velocity = Vector2.zero;
            // }
        }
    }


/// <summary>
/// 计时器
/// </summary>

    public void TimeCounter()
    {
        if (wait)
        {
            waitTimeCounter -= Time.deltaTime;
            if (waitTimeCounter <= 0)
            {
                wait = false;
                waitTimeCounter = waitTime;
                transform.localScale = new Vector3(faceDir.x, 1, 1);  // 翻转敌人的朝向
            }
        }


        if (!FoundPlayer() && LostTimeCounter > 0)
        {
            LostTimeCounter -= Time.deltaTime;
        }
        else if (FoundPlayer())    // 添加这个额外的判断，在发现玩家的时候重置丢失时间
        {
            LostTimeCounter = LostTime;
        }
    }

 


    public virtual bool FoundPlayer()
    {
        // if (Physics2D.BoxCast(transform.position + (Vector3)centerOffest , checkSize , 0 , faceDir , checkDistance , attackLayer))
        // {
        //     return true;
        // }
        // else
        // {
        //     return false;
        // }
        // return Physics2D.BoxCast(transform.position + (Vector3)centerOffest,checkSize , 0 , faceDir , checkDistance , attackLayer);
            return Physics2D.BoxCast(transform.position + (Vector3)centerOffest , checkSize , 0 , faceDir , checkDistance , attackLayer);
    }

    public void SwitchState(NPCState state)
    {
        var newState = state switch
        {
            NPCState.Patrol => patrolState,
            NPCState.Chase => chassState,
            NPCState.Skill => skillState,
            _ => null
        };

        currentState.OnExit();
        currentState = newState;
        currentState.OnEnter(this);
    }


#region 事件
    public  virtual void OnTakeDamage(Transform attackTrans)
    {
        attacker = attackTrans;
        //转身
        if (attackTrans.position.x - transform.position.x > 0)
            transform.localScale = new Vector3(-1, 1, 1);
        if (attackTrans.position.x - transform.position.x < 0)
            transform.localScale = new Vector3(1, 1, 1);

        //受伤被击退
        isHurt = true;
        anim.SetTrigger("hurt");
        Vector2 dir = new Vector2(transform.position.x - attackTrans.position.x, 0).normalized;
        rb.velocity = new Vector2(0, rb.velocity.y);

        StartCoroutine(OnHurt(dir));
    }

    private IEnumerator OnHurt(Vector2 dir)
    {
        // Debug.Log($"Applying force: {dir * hurtForce}");
        HitPs.Play();
        rb.AddForce(dir * hurtForce, ForceMode2D.Impulse);
        yield return new WaitForSeconds(0.5f);
        isHurt = false;
    }
    // 死亡
    public void OnDie()
    {
        anim.SetBool("dead", true);
        isDead = true;
        rb.isKinematic = true; // 禁用刚体的物理模拟
        rb.velocity = Vector2.zero; // 清除速度
        coll.enabled = false; // 禁用碰撞体
        // DestroyAfterAnimation();
        // pickupSpawner.DropItems();//生成道具
    
    }
//销毁物体
    public void DestroyAfterAnimation()
    {
        pickupSpawner.DropItems();//生成道具
        healthPickupSpawner.DropItems();

        Destroy(this.gameObject);
        // anim.SetBool("dead", false);
    }
#endregion


public virtual void OnDrawGizmosSelected() 
{
        Gizmos.DrawWireSphere(transform.position + (Vector3)centerOffest + new Vector3(checkDistance * -transform.localScale.x , 0),0.2f); 
}

public virtual Vector3 GetNewPoint()
{
    return transform.position;
}

}
